#
# Copilot Patch Prompt â€” PATCH-ALPHA-REGEN-V3-001
# This patch regenerates alpha_sensor_registry.json to conform to the output contract defined in contracts/expected_alpha_sensor_registry.yaml.
# Instructions:
# - Load config and thresholds from settings.conf.yaml
# - Use fingerprinting_run/ and manual_confirmed_matches.json as entity inference inputs
# - Re-cluster and re-score all eligible entities
# - Output must match field, role, and area requirements in the contract
# - Validate output against schema and expectations
# - Emit:
#     - output/alpha_sensor_registry.json
#     - output/data/alpha_sensor_registry.debug.log.json
#     - output/alpha_sensor_registry.validation_report.json
#     - output/data/cluster_coverage_metrics.json
# - Reject if minimums (coverage, roles, etc.) are not met

# Procedural Instructions:
# At the top of the file `PATCH-ALPHA-REGEN-V3-001.yaml`, insert the full procedural instructions block provided by the user.
# Prefix the entire inserted block with `#` on each line to preserve it as a comment.
# Do not remove or alter the existing YAML content; preserve all current fields.
# Insert the comment block before the existing top-level YAML key `---`.

# ---
# ðŸ“¦ PATCH-ALPHA-REGEN-V3-002
# ---
# ðŸ”§ Patch Objective:
# Rebuild `alpha_sensor_registry.json` using fully validated entity-to-area mapping and corrected role inference.
# This patch responds to failed validation (2.6% coverage) in V3-001 due to unassigned areas and invalid roles.

# instructions:
#   - Step 1: Load `core.entity_registry` and extract `entity_id â†’ area_id` mappings
#   - Step 2: For each entity:
#       - If area_id is present â†’ resolve to `area.name` using `core.area_registry`
#       - Apply `role_inference_rules` and `semantic_role_map` from `settings.conf.yaml`
#       - Apply negative scoring logic from `negative_score_rules`
#       - If entity matches a tuning/feature role, mark with `is_feature: true`
#   - Step 3: Group valid non-feature entities into clusters:
#       - Group key: f"{area}_{role}_{semantic_role}_{tier}"
#       - Each cluster must have â‰¥1 post_reboot_entity_id and `tier: alpha`
#   - Step 4: Attach any matching `is_feature: true` entities to parent cluster as `features[]`
#   - Step 5: Emit debug trace log per entity:
#       - Fields: `entity_id`, `area_id`, `area_name`, `role`, `semantic_role`, `inferred_cluster_id`, `score`, `excluded_reason` (if any)
#       - Path: `output/data/alpha_sensor_registry.debug.mapping_trace.json`
#   - Step 6: Validate result against `expected_alpha_sensor_registry.yaml`
#   - Step 7: Emit all outputs and summary log as per V3-001, and tag this execution with `[PATCH-ALPHA-REGEN-V3-002]`

---

version: 1.0
source: PATCH-ALPHA-REGEN-V3-001
description: |
  Output contract for the regenerated alpha_sensor_registry.json.
  Enforces completeness, structure, and minimum coverage against the known entity base.

thresholds:
  min_confidence_score_mean: 0.92
  min_coverage_percent: 90.0
  max_feature_count_per_cluster: 3
  required_fields:
    - id
    - area
    - role
    - semantic_role
    - tier
    - confidence_score_mean
    - post_reboot_entity_ids
    - source_clusters
    - match_methods

schema_constraints:
  tier: "alpha"
  allow_features: true
  enforce_area_presence: true
  enforce_unique_entity_ids: true

role_expectations:
  motion_monitor: { min_clusters: 4 }
  occupancy_monitor: { min_clusters: 4 }
  climate_monitor: { min_clusters: 4 }
  humidity_monitor: { min_clusters: 4 }
  contact_monitor: { min_clusters: 2 }
  light_level_sensor: { min_clusters: 2 }
  override_trigger: { min_clusters: 1 }

area_expectations:
  bedroom: { min_clusters: 5 }
  ensuite: { min_clusters: 3 }
  kitchen: { min_clusters: 5 }
  living_room: { min_clusters: 4 }
  hallway_downstairs: { min_clusters: 2 }
  hallway_upstairs: { min_clusters: 2 }

audit_outputs:
- output/alpha_sensor_registry.json
- output/data/alpha_sensor_registry.debug.log.json
- output/alpha_sensor_registry.validation_report.json
- output/data/cluster_coverage_metrics.json

