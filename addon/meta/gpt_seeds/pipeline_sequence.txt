Below is a canonical execution and validation sequence for the full registry rehydration pipeline. It is designed as an end-to-end operations brief ‚Äî your single source of truth for validating or re-running the process with Copilot. It includes:
	‚Ä¢	All phases
	‚Ä¢	Scripts involved
	‚Ä¢	Input/output expectations
	‚Ä¢	Validation checkpoints
	‚Ä¢	Follow-up instructions

‚∏ª

üß≠ HESTIA OMEGA/ALPHA PIPELINE EXECUTION & VALIDATION BRIEF

Version: rehydration_protocol_v2.7
Context Lock: PROMACHOS_PROTOCOL_LOCK
Maintainer: e-app-404

‚∏ª

üß© STAGE OVERVIEW

Phase	Label	Description	Primary Script(s)
1	device_map_construction	Build internal device map for ID lookups	generate_cleaned_device_registry.py
2	entity_preprocessing	Normalize and filter raw entities	emit_alpha_sensor_registry.py
3	area_inference	Infer area_id per entity	fingerprint_entity_reconciliation.py
4	role_inference	Infer functional role per entity	fingerprint_entity_reconciliation.py
5	entity_fingerprinting	Generate fingerprint map (area+role+device+platform)	fingerprint_entity_reconciliation.py
6	migration_map_expansion	Enrich ID mapping with inferred roles	expand_migration_map_full_role_coverage.py
7	cluster_summary	Summarize clusters and validate inference coverage	cluster_summary.py
8	rehydration_emission	Emit final room registry and diagnostics	generate_omega_room_registry.py
9	rehydration_metrics	Validate completeness, exclusions, unresolved entities	Copilot + cluster_coverage_metrics.*, rehydration_delta_log.json
10	pipeline_metrics_audit	Collect metrics and timestamps across pipeline stages	pipeline_metrics.latest.json, pipeline_metrics.*.json


‚∏ª

‚úÖ PHASE CHECKLIST & EXECUTION CONTRACT

üìç PHASE 1: Device Map Construction
	‚Ä¢	Script: scripts/generate_cleaned_device_registry.py
	‚Ä¢	Inputs:
	‚Ä¢	input/core.device_registry
	‚Ä¢	Outputs:
	‚Ä¢	output/omega_device/omega_device_registry.cleaned.v2.json
	‚Ä¢	output/devicemaps/device_map_v1.pkl (optional)
	‚Ä¢	Validation:
	‚Ä¢	device_count matches expectations (e.g. 221+)
	‚Ä¢	status: completed in pipeline_metrics.latest.json
	‚Ä¢	Follow-up: Confirm that no device IDs are missing. Proceed if missing_device_ids == 0.

‚∏ª

üìç PHASE 2‚Äì4: Entity Preprocessing, Area Inference, Role Inference
	‚Ä¢	Script: scripts/fingerprint_entity_reconciliation.py
	‚Ä¢	Inputs:
	‚Ä¢	input/core.entity_registry
	‚Ä¢	input/core.device_registry
	‚Ä¢	Outputs:
	‚Ä¢	data/entity_fingerprint_map.<ts>.json
	‚Ä¢	output/fingerprinting_run/area_inference_debug.json
	‚Ä¢	Validation:
	‚Ä¢	All entities are present
	‚Ä¢	role, area_id, device_id resolved in fingerprint
	‚Ä¢	At least 90% area and role inference success rate
	‚Ä¢	Follow-up:
	‚Ä¢	If error: patch sys.path and infer_role() unpacking
	‚Ä¢	Use centralized infer_area_id() logic in all scripts

‚∏ª

üìç PHASE 5: Fingerprint Consolidation
	‚Ä¢	Same as Phases 2‚Äì4 (single script)
	‚Ä¢	Output must include:
	‚Ä¢	Fingerprint fields:
	‚Ä¢	area_id, role, cluster_id, semantic_role, confidence_score, platform, etc.
	‚Ä¢	Validation:
	‚Ä¢	Log total entities
	‚Ä¢	confidence_score >= 0.80 for majority of inferences
	‚Ä¢	Patch and re-run if any fields are missing or null

‚∏ª

üìç PHASE 6: Migration Map Expansion
	‚Ä¢	Script: scripts/expand_migration_map_full_role_coverage.py
	‚Ä¢	Inputs:
	‚Ä¢	output/entity_id_migration_map.annotated.v4.json
	‚Ä¢	Outputs:
	‚Ä¢	output/entity_id_migration_map.annotated.v4.full.json
	‚Ä¢	Validation:
	‚Ä¢	All known entities mapped
	‚Ä¢	confidence_score retained
	‚Ä¢	semantic_role, source_entity_id, match_method fields populated

‚∏ª

üìç PHASE 7: Cluster Summary
	‚Ä¢	Script: scripts/cluster_summary.py
	‚Ä¢	Inputs:
	‚Ä¢	data/entity_fingerprint_map.*.json
	‚Ä¢	Outputs:
	‚Ä¢	data/cluster_summary.<ts>.json
	‚Ä¢	Validation:
	‚Ä¢	cluster_id != null
	‚Ä¢	Cluster counts per area/role reflect real entities
	‚Ä¢	If empty: patch to allow "null_<role>" or "unknown_area_<role>"

‚∏ª

üìç PHASE 8: Rehydration Emission
	‚Ä¢	Script: scripts/generate_omega_room_registry.py
	‚Ä¢	Inputs:
	‚Ä¢	data/entity_fingerprint_map.*.json
	‚Ä¢	output/entity_id_migration_map.annotated.v4.full.json
	‚Ä¢	settings.conf.yaml
	‚Ä¢	Outputs:
	‚Ä¢	output/omega_room/omega_room_registry.json
	‚Ä¢	output/rehydration/rehydration_delta_log.json
	‚Ä¢	output/rehydration/room_registry_completeness_audit.json
	‚Ä¢	output/rehydration/unresolved_entities.log.json
	‚Ä¢	output/rehydration/TARBALL-OMEGA-ROOM-REGISTRY-STRICT-FINAL-CORRECTED.tar.gz
	‚Ä¢	Validation:
	‚Ä¢	Confirm included entities > 0
	‚Ä¢	reason: missing_final_area_or_cluster_id should only affect unresolved cases
	‚Ä¢	Tarball path must be correct (avoid nested registry_rehydration_local/registry_rehydration_local)

‚∏ª

üìç PHASE 9: Rehydration Metrics & Diagnostics
	‚Ä¢	Script: None (Copilot audit or custom)
	‚Ä¢	Inputs:
	‚Ä¢	rehydration_delta_log.json
	‚Ä¢	room_registry_completeness_audit.json
	‚Ä¢	cluster_coverage_metrics.*.json
	‚Ä¢	Outputs:
	‚Ä¢	Diagnostics only
	‚Ä¢	Validation:
	‚Ä¢	excluded_entities == 0 or reasonable
	‚Ä¢	rehydration_delta_log.json includes entities
	‚Ä¢	If all are excluded ‚Üí pipeline error ‚Üí fix area/cluster inference

‚∏ª

üìç PHASE 10: Pipeline Metrics Audit
	‚Ä¢	Script: Copilot-logged
	‚Ä¢	File: data/pipeline_metrics.latest.json
	‚Ä¢	Validation:
	‚Ä¢	All status == completed
	‚Ä¢	script, input, outputs, duration_seconds, notes fully populated
	‚Ä¢	Follow-up:
	‚Ä¢	If status == simulated or pending: rerun step
	‚Ä¢	Use this log to track and rehydrate future runs

‚∏ª

üîÑ RE-RUN PROTOCOL

For each stage:

python3 scripts/<scriptname>.py --config settings.conf.yaml

Optional:

--output data/<your_output_file>.json


‚∏ª

üìÅ EXPECTED OUTPUT FILES

File	Description
entity_fingerprint_map.*.json	Canonical fingerprint map
entity_id_migration_map.annotated.v4.full.json	ID migration with roles
omega_room_registry.json	Final rehydrated room registry
rehydration_delta_log.json	Inclusion/exclusion log
room_registry_completeness_audit.json	Per-area cluster summary
TARBALL-OMEGA-ROOM-REGISTRY-STRICT-FINAL-CORRECTED.tar.gz	Deliverable tarball


‚∏ª

üß∑ RECOVERY / PATCH LOGGING
	‚Ä¢	All patches must be recorded in:
	‚Ä¢	copilot_patchlog_overview.log
	‚Ä¢	copilot_patches/PATCH-<name>.log

‚∏ª
